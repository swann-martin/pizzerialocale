import Head from 'next/head';
import Image from 'next/image';
import { Inter } from '@next/font/google';
import { GetServerSideProps } from 'next';
import Link from 'next/link';
import { Drink, Food, drinkEnum, ingredients } from '../src/db/schema';
import Footer from './components/Footer';
import ContactMap from './components/ContactMap';
import Hero from './components/Hero';
import {
  IconChevronDown,
  IconChevronUp,
  VegetarianIcon
} from './components/Icons';
import { useState } from 'react';
import Accordion from './components/Acordeon';

const inter = Inter({ subsets: ['latin'] });

export const url = process.env.url;

export default function Home({
  foods,
  drinks,
  ingredients
}: {
  foods: Food[];
  drinks: Drink[];
  ingredients: string[];
}) {
  let phone = '+32 2 215 68 80';
  const title = 'Pizzeria del parco';

  const [openAccordion, setOpenAccordion] = useState<null | number>(0);
  const handleAccordionClick = (index: number) => {
    if (index !== openAccordion) {
      setOpenAccordion(index);
    } else {
      setOpenAccordion(null);
    }
  };

  const [filteredFoods, setFilteredFoods] = useState<Food[]>(foods);
  const [filteredDrinks, setFilteredDrinks] = useState<Drink[]>(drinks);
  const [drinkTypeSelector, setTypeDrinkSelector] = useState<string>('');
  const [foodIngredientSelector, setFoodIngredientSelector] =
    useState<string>('');

  const drinkTypes = [
    'Vin Blanc',
    'Vin Rosé',
    'Sans alcool',
    'Liqueur',
    'Bière',
    'Apéritif'
  ];

  const NavBar = () => (
    <nav className="fixed right-0 left-2 top-4 z-50 navbar">
      <Link href={{ pathname: '/' }} className="flex items-center w-16 h-16">
        <Image
          src={'/images/logo.avif'}
          width={100}
          height={100}
          className="object-contain"
          alt="pizzeria-del-parco"
        />
      </Link>
    </nav>
  );

  return (
    <>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/images/logo.avif" />
      </Head>
      <main className="main">
        <Hero phone={phone}>
          <NavBar />
        </Hero>

        <section id="menu" className="py-3 mx-auto max-w-screen-xl bg-white">
          <h2
            onClick={() => handleAccordionClick(0)}
            className="flex justify-center items-center pt-2 text-3xl font-extrabold text-center rounded-lg border-none cursor-pointer hover:bg-gray-100"
          >
            Pizzas
            <span className="pl-2">
              {openAccordion === 0 ? (
                <IconChevronDown className="text-green-600" />
              ) : (
                <IconChevronUp className="text-green-600" />
              )}
            </span>
          </h2>
          <ul
            className={` ${
              openAccordion === 0 ? 'flex' : 'hidden'
            } flex flex-col gap-4 p-5 `}
          >
            <div className="grid grid-cols-2 gap-2 pt-2 sm:grid-cols-8">
              {ingredients?.map((el: string, index: number) => {
                return (
                  <h4
                    onClick={() => {
                      if (foodIngredientSelector?.includes(el)) {
                        console.log(el, foodIngredientSelector);
                        setFoodIngredientSelector('');
                        setFilteredFoods(foods);
                      } else {
                        let newFood = foodIngredientSelector;
                        setFoodIngredientSelector(el);
                        setFilteredFoods(
                          foods.filter((foods) =>
                            (foods.ingredients as unknown as string).includes(
                              el
                            )
                          )
                        );
                      }
                    }}
                    className={`p-2 text-center text-sm text-white rounded-lg cursor-pointer hover:bg-green-700 active:bg-green-700 ${
                      foodIngredientSelector === el
                        ? 'bg-green-600'
                        : 'bg-slate-500'
                    } `}
                    key={el + index}
                  >
                    {el}
                  </h4>
                );
              })}
            </div>

            {!!filteredFoods?.length &&
              filteredFoods?.map((food, index) => (
                <li
                  key={index}
                  className="flex flex-col p-4 bg-gray-100 rounded-lg border-none shadow-lg gap-500"
                >
                  <div className="flex justify-between">
                    <div className="flex flex-col">
                      <h3 className="font-bold">{food.name}</h3>
                      <p>{food.ingredients}</p>
                    </div>
                    <div className="flex flex-col">
                      <span>{food.price}€</span>
                      {food?.veg && (
                        <p
                          className="text-green-600 text-extrabold"
                          title="Vegetarian"
                        >
                          <VegetarianIcon className="color-green-600" />
                        </p>
                      )}
                    </div>
                  </div>
                </li>
              ))}
          </ul>
          <h2
            onClick={() => {
              handleAccordionClick(1);
              setFilteredDrinks(drinks);
            }}
            className="flex justify-center items-center pt-2 text-3xl font-extrabold text-center rounded-lg border-none cursor-pointer hover:bg-gray-100"
          >
            Drinks
            <span className="pl-2">
              {openAccordion === 1 ? (
                <IconChevronDown className="text-green-600" />
              ) : (
                <IconChevronUp className="text-green-600" />
              )}
            </span>
          </h2>

          <ul
            className={` ${
              openAccordion === 1 ? 'flex' : 'hidden'
            } flex flex-col gap-4 p-5 `}
          >
            <div className="grid grid-cols-2 gap-2 pt-2 text-sm sm:grid-cols-8">
              {drinkTypes?.map((drinkType, index) => {
                return (
                  <h4
                    onClick={() => {
                      if (drinkTypeSelector === drinkType) {
                        setTypeDrinkSelector('');
                        setFilteredDrinks(drinks);
                      } else {
                        setTypeDrinkSelector(drinkType);
                        setFilteredDrinks(
                          drinks.filter(
                            (drinks) =>
                              (drinks.typeDrink as unknown as string) ===
                              drinkType
                          )
                        );
                      }
                    }}
                    className={`p-2 text-center text-white rounded-lg cursor-pointer hover:bg-green-700 active:bg-green-700 ${
                      drinkTypeSelector == drinkType
                        ? 'bg-green-600'
                        : 'bg-slate-500'
                    } `}
                    key={drinkType}
                  >
                    {drinkType}
                  </h4>
                );
              })}
            </div>
            {!!filteredDrinks?.length &&
              filteredDrinks?.map((drink, index) => {
                return (
                  <li
                    key={drink.name + drink.id}
                    className="flex flex-col p-4 bg-gray-100 rounded-lg border-none shadow-lg gap-500"
                  >
                    <div className="flex justify-between">
                      <h3>{drink.name}</h3>
                      <div>
                        <span>{drink.price}€</span>
                      </div>
                    </div>
                  </li>
                );
              })}
          </ul>
        </section>
        {/* <ContactMap phone={phone} /> */}
        <Footer title={title} />
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  try {
    const url = !!process.env.URL ? process.env?.URL : 'http://localhost:3000';

    const query = await fetch(new URL('/api/foods', url));
    const data = await query.json();

    const foods = data?.foods;
    let rawIngredients = foods
      ?.map(
        (food: Food) => food.type === 'Pizza' && food?.ingredients?.split(',')
      )
      ?.flat();
    rawIngredients = rawIngredients?.map((el: string) =>
      el.trim().toLowerCase()
    );
    let uniqueIngredients = [...new Set(rawIngredients)];

    return {
      props: {
        foods: data?.foods,
        drinks: data?.drinks,
        ingredients: uniqueIngredients
      }
    };
  } catch (err) {
    return {
      props: {
        foods: [],
        drinks: [],
        ingredients: []
      }
    };
  }
};
